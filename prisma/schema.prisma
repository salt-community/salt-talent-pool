// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("public.account")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("public.session")
}

enum Role {
    SALTIE
    CLIENT
    ADMIN
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    role          Role          @default(CLIENT)
    accounts      Account[]
    sessions      Session[]
    cartItems     CartItem[]
    developer     Developer?    @relation(fields: [developerId], references: [id], onDelete: Cascade)
    developerId   String?
    LogClickDev   LogClickDev[]
    LogSearch     LogSearch[]

    @@map("public.user")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("public.verificationtoken")
}

model Project {
    id          String              @id @default(cuid())
    title       String
    youtube     String
    description String
    githubLink  String
    members     Project_developer[]

    @@map("public.project")
}

model Project_developer {
    id          String    @id @default(cuid())
    Developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
    developerId String
    project     Project   @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId     String
    order       Int       @default(0)

    @@map("public.project_developer")
}

model Developer {
    id           String              @id @default(cuid())
    slug         String              @unique @default(cuid())
    name         String
    phone        String
    mail         String
    city         String
    address      String
    country      String
    image        String
    gitHubUrl    String
    linkedinUrl  String
    resume       String
    description  String
    skills       String[]
    title        String
    lastModified DateTime
    projects     Project_developer[]
    mobs         Mob_developer[]
    User         User[]
    CartItem     CartItem[]
    LogClickDev  LogClickDev[]
    locationPref String[]
    status       String              @default("UNPUBLISHED")

    @@map("public.developer")
}

model Mob_developer {
    id          String    @id @default(cuid())
    Developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
    developerId String
    Mob         Mob       @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId     String

    @@map("public.mob_developer")
}

model Mob {
    id      String          @id @default(cuid())
    name    String
    members Mob_developer[]

    @@map("public.mob")
}

model CartItem {
    id          String    @id @default(cuid())
    date        DateTime  @default(now())
    developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
    developerId String
    comment     String?
    User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String

    @@unique([developerId, userId])
    @@map("public.cartItem")
}

model LogClickDev {
    id          String    @id @default(cuid())
    User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
    developerId String
    date        DateTime  @default(now())
}

model LogSearch {
    id     String   @id @default(cuid())
    User   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    search String
    date   DateTime @default(now())
}
